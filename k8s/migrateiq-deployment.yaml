apiVersion: v1
kind: Namespace
metadata:
  name: migrateiq
  labels:
    name: migrateiq
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: migrateiq-config
  namespace: migrateiq
data:
  DEBUG: "False"
  ALLOWED_HOSTS: "migrateiq.com,www.migrateiq.com,api.migrateiq.com"
  CORS_ALLOWED_ORIGINS: "https://migrateiq.com,https://www.migrateiq.com"
  DATABASE_URL: "postgresql://migrateiq:$(POSTGRES_PASSWORD)@postgres-service:5432/migrateiq"
  REDIS_URL: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
  CELERY_BROKER_URL: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
  CELERY_RESULT_BACKEND: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"

---
apiVersion: v1
kind: Secret
metadata:
  name: migrateiq-secrets
  namespace: migrateiq
type: Opaque
data:
  SECRET_KEY: # Base64 encoded Django secret key
  POSTGRES_PASSWORD: # Base64 encoded PostgreSQL password
  REDIS_PASSWORD: # Base64 encoded Redis password
  NHS_ENCRYPTION_KEY: # Base64 encoded NHS encryption key
  EMAIL_HOST_PASSWORD: # Base64 encoded email password
  SENTRY_DSN: # Base64 encoded Sentry DSN

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: migrateiq
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: migrateiq
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: migrateiq
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: migrateiq
        - name: POSTGRES_USER
          value: migrateiq
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - migrateiq
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - migrateiq
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: migrateiq
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: migrateiq
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: migrateiq
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: migrateiq-backend
  namespace: migrateiq
  labels:
    app: migrateiq-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: migrateiq-backend
  template:
    metadata:
      labels:
        app: migrateiq-backend
    spec:
      containers:
      - name: backend
        image: migrateiq/backend:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: migrateiq-config
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: REDIS_PASSWORD
        - name: NHS_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: NHS_ENCRYPTION_KEY
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
      initContainers:
      - name: migrate
        image: migrateiq/backend:latest
        command: ['python', 'manage.py', 'migrate']
        envFrom:
        - configMapRef:
            name: migrateiq-config
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: POSTGRES_PASSWORD

---
apiVersion: v1
kind: Service
metadata:
  name: migrateiq-backend-service
  namespace: migrateiq
spec:
  selector:
    app: migrateiq-backend
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: migrateiq
  labels:
    app: celery-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: celery-worker
        image: migrateiq/backend:latest
        command: ['celery', '-A', 'migrateiq', 'worker', '-l', 'info', '--concurrency=4']
        envFrom:
        - configMapRef:
            name: migrateiq-config
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: migrateiq-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: migrateiq-ingress
  namespace: migrateiq
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - migrateiq.com
    - www.migrateiq.com
    - api.migrateiq.com
    secretName: migrateiq-tls
  rules:
  - host: api.migrateiq.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: migrateiq-backend-service
            port:
              number: 8000
  - host: migrateiq.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: migrateiq-frontend-service
            port:
              number: 80
  - host: www.migrateiq.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: migrateiq-frontend-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: migrateiq-backend-hpa
  namespace: migrateiq
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: migrateiq-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
